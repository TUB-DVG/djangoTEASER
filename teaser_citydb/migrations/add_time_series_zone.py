# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-20 13:20
from __future__ import unicode_literals

from django.db import migrations
from citydb.shortcuts import time_series_data
from teaser.project import Project
from teaser.data.input import usecond_input
from teaser.logic.buildingobjects.useconditions import UseConditions
import pandas as pd

# Add units
def time_series_usage_zone(apps, schema_editor):
    """Write time series for usage zones."""
    prj = Project(load_data=True)
    for usage_zone, data in prj.data.conditions_bind.items():
        if usage_zone != "version":
            uc = UseConditions(parent=None)
            usecond_input.load_use_conditions(
                use_cond=uc, zone_usage=usage_zone, data_class=prj.data
            )
            uc.schedules.index = pd.date_range(
                "2014-01-01 00:00:00", periods=8760, freq="H"
            )
            time_series_data.add_time_series(
                values=uc.schedules["heating_profile"].to_frame(),
                thematic_description="Schedule",
                acquisition_method="estimation",
                file_id="{}_heating_schedule".format(uc.usage),
                source="TEASER",
                description="Standard TEASER value for schedule",
                uom=None,
                end_use=None,
                energy_system=None,
            )
            time_series_data.add_time_series(
                values=uc.schedules["cooling_profile"].to_frame(),
                thematic_description="Schedule",
                acquisition_method="estimation",
                file_id="{}_cooling_schedule".format(uc.usage),
                source="TEASER",
                description="Standard TEASER value for schedule",
                uom=None,
                end_use=None,
                energy_system=None,
            )
            time_series_data.add_time_series(
                values=uc.schedules["persons_profile"].to_frame(),
                thematic_description="Schedule",
                acquisition_method="estimation",
                file_id="{}_occupants".format(uc.usage),
                source="TEASER",
                description="Standard TEASER value for schedule",
                uom=None,
                end_use=None,
                energy_system=None,
            )
            time_series_data.add_time_series(
                values=uc.schedules["machines_profile"].to_frame(),
                thematic_description="Schedule",
                acquisition_method="estimation",
                file_id="{}_machines".format(uc.usage),
                source="TEASER",
                description="Standard TEASER value for schedule",
                uom=None,
                end_use=None,
                energy_system=None,
            )
            time_series_data.add_time_series(
                values=uc.schedules["lighting_profile"].to_frame(),
                thematic_description="Schedule",
                acquisition_method="estimation",
                file_id="{}_lighting".format(uc.usage),
                source="TEASER",
                description="Standard TEASER value for schedule",
                uom=None,
                end_use=None,
                energy_system=None,
            )


class Migration(migrations.Migration):

    dependencies = [("teaser_citydb", "add_content")]

    operations = [migrations.RunPython(time_series_usage_zone)]
